name: build-specific-clang-llvm-with-gold-plugin

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'LLVM GitHub Release Version (e.g., 18.1.0)'
        required: true
        type: string
      binutils_version:
        description: 'Binutils-GDB Git Tag (e.g., binutils-2_41) for Gold plugin headers'
        required: false
        type: string
        default: 'binutils-2_41'

jobs:
  build-clang-llvm-toolchain:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BINUTILS_INCLUDE_DIR: ${{ github.workspace }}/binutils/include

    steps:
      - name: Checkout repository's default branch
        uses: actions/checkout@v4

      - name: Create build and installation directories
        run: |
          mkdir llvm-project stage1 x86_64-linux-llvm-toolchain build-stage1 build-stage2 binutils

      - name: Download LLVM Project release tarball
        run: |
          curl --location https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ inputs.version }}/llvm-project-${{ inputs.version }}.src.tar.xz -o llvm-project.tar.xz

      - name: Extract LLVM Project source
        run: tar -xf llvm-project.tar.xz -C llvm-project --strip-components 1

      - name: Clone Binutils-GDB and Checkout Specific Tag for Gold plugin headers
        run: |
          git clone git://sourceware.org/git/binutils-gdb.git binutils
          cd binutils
          git fetch --all --tags
          git checkout ${{ inputs.binutils_version }}
          cd ..

      - name: Verify Binutils Headers
        run: |
          echo "Contents of binutils/include:"
          ls -l "${BINUTILS_INCLUDE_DIR}"
          echo "Searching for plugin-api.h:"
          find "${BINUTILS_INCLUDE_DIR}" -name "plugin-api.h"

      - name: Configure Stage 1 with CMake
        run: |
          cmake -S llvm-project/llvm -B build-stage1 -G Ninja \
            -DCMAKE_INSTALL_PREFIX=stage1 \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="clang;lld" \
            -DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxx;libcxxabi" \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF \
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DCLANG_DEFAULT_UNWINDLIB=libunwind \
            -DCLANG_DEFAULT_RTLIB=compiler-rt \
            -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
            -DCLANG_DEFAULT_LINKER=lld \
            -DLIBUNWIND_USE_COMPILER_RT=Yes \
            -DLIBCXX_USE_COMPILER_RT=YES \
            -DLIBCXXABI_USE_COMPILER_RT=YES \
            -DLIBCXXABI_USE_LLVM_UNWINDER=YES \
            -DBUILTINS_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" \
            -DRUNTIMES_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_BINUTILS_INCDIR="${BINUTILS_INCLUDE_DIR}" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON

      - name: Build Stage 1 with Ninja
        run: ninja -C build-stage1 install

      - name: Configure Stage 2 with CMake
        run: |
          cmake -S llvm-project/llvm -B build-stage2 -G Ninja \
            -DCMAKE_C_COMPILER="$(pwd)/stage1/bin/clang" \
            -DCMAKE_CXX_COMPILER="$(pwd)/stage1/bin/clang++" \
            -DCMAKE_INSTALL_PREFIX=x86_64-linux-llvm-toolchain \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt;libunwind;libcxx;libcxxabi" \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF \
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DCLANG_DEFAULT_UNWINDLIB=libunwind \
            -DCLANG_DEFAULT_RTLIB=compiler-rt \
            -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
            -DCLANG_DEFAULT_LINKER=lld \
            -DLIBUNWIND_USE_COMPILER_RT=Yes \
            -DLIBCXX_USE_COMPILER_RT=YES \
            -DLIBCXXABI_USE_COMPILER_RT=YES \
            -DLIBCXXABI_USE_LLVM_UNWINDER=YES \
            -DLLVM_ENABLE_LIBCXX=ON \
            -DCOMPILER_RT_CXX_LIBRARY=libcxx \
            -DBUILTINS_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" \
            -DRUNTIMES_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLIBCXX_HAS_ATOMIC_LIB=OFF \
            -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
            -DLLVM_BINUTILS_INCDIR="${BINUTILS_INCLUDE_DIR}" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON

      - name: Build Stage 2 with Ninja
        run: |
          export LD_LIBRARY_PATH="$(pwd)/stage1/lib"
          ninja -C build-stage2 install

      - name: Check Stage 2 linkage and LLVMgold.so presence
        run: |
          ldd x86_64-linux-llvm-toolchain/bin/ld.lld
          unset LD_LIBRARY_PATH
          ldd x86_64-linux-llvm-toolchain/bin/ld.lld
          echo "Checking for LLVMgold.so:"
          find x86_64-linux-llvm-toolchain -name "LLVMgold.so"

      - name: Compress Stage 2 toolchain
        run: tar -czf x86_64-linux-llvm-toolchain.tar.gz x86_64-linux-llvm-toolchain

      - name: Create GitHub Release
        run: |
          TAG="${{ inputs.version }}_$(date +'%b-%d-%Y')-$(date -d "1970-01-01 UTC $(date +%T)" +%s)s"
          gh release create "${TAG}" x86_64-linux-llvm-toolchain.tar.gz
