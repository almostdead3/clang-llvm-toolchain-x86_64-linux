name: check-llvmgold-detection

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'LLVM GitHub Release Version (e.g., 18.1.0)'
        required: true
        type: string
      binutils_version:
        description: 'Binutils-GDB Git Tag (e.g., binutils-2_41) for Gold plugin headers'
        required: false
        type: string
        default: 'binutils-2_41'

jobs:
  check-gold-plugin-detection:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BINUTILS_INCLUDE_DIR: ${{ github.workspace }}/binutils/include

    steps:
      - name: Checkout repository's default branch
        uses: actions/checkout@v4

      - name: Create necessary directories
        run: |
          mkdir llvm-project build-stage1 binutils # Only create directories needed for Stage 1 config

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential python3 cmake ninja-build git

      - name: Download LLVM Project release tarball
        run: |
          curl --location https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ inputs.version }}/llvm-project-${{ inputs.version }}.src.tar.xz -o llvm-project.tar.xz

      - name: Extract LLVM Project source
        run: tar -xf llvm-project.tar.xz -C llvm-project --strip-components 1

      - name: Clone Binutils-GDB and Checkout Specific Tag for Gold plugin headers
        run: |
          git clone git://sourceware.org/git/binutils-gdb.git binutils
          cd binutils
          git fetch --all --tags
          git checkout ${{ inputs.binutils_version }}
          cd ..

      - name: Verify Binutils Headers
        run: |
          echo "Contents of binutils/include:"
          ls -l "${BINUTILS_INCLUDE_DIR}"
          echo "Searching for plugin-api.h:"
          find "${BINUTILS_INCLUDE_DIR}" -name "plugin-api.h"

      - name: Configure LLVM with CMake (Stage 1 only)
        run: |
          mkdir -p build-stage1
          echo "LLVM_ENABLE_PIC:BOOL=ON" >> build-stage1/CMakeCache.txt
          echo "Setting LLVM_ENABLE_PIC=TRUE directly in build-stage1/CMakeCache.txt"
          cat build-stage1/CMakeCache.txt

          cmake -S llvm-project/llvm -B build-stage1 -G Ninja \
            -DCMAKE_INSTALL_PREFIX=stage1 \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="clang;lld" \
            -DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxx;libcxxabi" \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF \
            -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON \
            -DLLVM_INCLUDE_BENCHMARKS=OFF \
            -DLLVM_INCLUDE_EXAMPLES=OFF \
            -DLLVM_INCLUDE_TESTS=OFF \
            -DCLANG_DEFAULT_UNWINDLIB=libunwind \
            -DCLANG_DEFAULT_RTLIB=compiler-rt \
            -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
            -DCLANG_DEFAULT_LINKER=lld \
            -DLIBUNWIND_USE_COMPILER_RT=Yes \
            -DLIBCXX_USE_COMPILER_RT=YES \
            -DLIBCXXABI_USE_COMPILER_RT=YES \
            -DLIBCXXABI_USE_LLVM_UNWINDER=YES \
            -DBUILTINS_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" \
            -DRUNTIMES_CMAKE_ARGS="-DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF" \
            -DLLVM_ENABLE_LIBXML2=OFF \
            -DLLVM_BINUTILS_INCDIR="${BINUTILS_INCLUDE_DIR}"

      - name: Check CMake Configuration for Gold Plugin Detection
        run: |
          echo "--- CMakeCache.txt excerpt for Gold Plugin Detection ---"
          grep -E "BINUTILS_INCDIR|CMAKE_POSITION_INDEPENDENT_CODE|LLVM_BUILD_LLVMGOLD_PLUGIN" build-stage1/CMakeCache.txt || echo "No relevant entries found in CMakeCache.txt"
          echo "--- End of CMakeCache.txt excerpt ---"
