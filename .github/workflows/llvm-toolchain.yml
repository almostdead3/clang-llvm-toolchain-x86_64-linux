name: llvm-build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'LLVM GitHub Release Version (e.g., 18.1.0)'
        required: true
        type: string
      binutils_version:
        description: 'Binutils-GDB Git Tag (e.g., binutils-2_41) - Not directly used for official build of LLVMgold.so'
        required: false
        type: string
        default: 'binutils-2_41'

jobs:
  build-official-llvm:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BINUTILS_INCLUDE_DIR: ${{ github.workspace }}/binutils/include

    steps:
      - name: Checkout repository's default branch
        uses: actions/checkout@v4

      - name: Create build directory
        run: mkdir mybuilddir

      - name: Install build dependencies (CMake, Ninja, Git)
        run: |
          sudo apt-get update
          sudo apt-get install -y curl build-essential python3 cmake ninja-build git texinfo flex bison libgmp-dev libmpfr-dev

      - name: Clone Binutils-GDB for Gold plugin headers and build
        run: |
          git clone --depth 1 git://sourceware.org/git/binutils-gdb.git binutils
          mkdir binutils-build
          cd binutils-build
          ../binutils/configure --enable-gold --enable-plugins --disable-werror
          make all-gold

      - name: Download LLVM Project release tarball
        run: |
          curl --location https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ inputs.version }}/llvm-project-${{ inputs.version }}.src.tar.xz -o llvm-project.tar.xz

      - name: Extract LLVM Project source
        run: tar -xf llvm-project.tar.xz -C . --strip-components 1

      - name: Configure LLVM with CMake (Official Method)
        working-directory: mybuilddir
        run: |
          cmake ../llvm -G Ninja -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/x86_64-linux-llvm-toolchain -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD="AArch64;ARM;X86" -DLLVM_BINUTILS_INCDIR="${{ env.BINUTILS_INCLUDE_DIR }}" -DLLVM_ENABLE_PROJECTS="clang;lldb;lld" -DLLVM_USE_LINKER=gold

      - name: Build LLVM (Official Method)
        working-directory: mybuilddir
        run: cmake --build .

      - name: Install LLVM (Official Method)
        working-directory: mybuilddir
        run: cmake --build . --target install

      - name: Verify Installed Files (Basic Check)
        run: |
          echo "Listing contents of the installed toolchain:"
          ls -R ${{ github.workspace }}/x86_64-linux-llvm-toolchain
          echo "Checking for clang executable:"
          test -f ${{ github.workspace }}/x86_64-linux-llvm-toolchain/bin/clang && echo "clang found." || echo "clang NOT found."

      - name: Compress toolchain
        run: |
          tar -cJvf x86_64-linux-llvm-toolchain-${{ inputs.version }}.tar.xz x86_64-linux-llvm-toolchain
          echo "Compressed toolchain size:"
          du -sh x86_64-linux-llvm-toolchain-${{ inputs.version }}.tar.xz

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ inputs.version }}-build
          name: LLVM Clang Toolchain ${{ inputs.version }}
          body: |
            LLVM Clang Toolchain for x86_64-linux, built as per official CMake notes.
            Version: ${{ inputs.version }}
            Note: This build is a minimal official configuration and may not include all components by default. Thanks to llvm-project and github.
          files: x86_64-linux-llvm-toolchain-${{ inputs.version }}.tar.xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
